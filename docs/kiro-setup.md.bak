# 🚀 IaC Setup with Kiro (Terraform × Pre-commit)

このドキュメントは Kiro に投げられるプロンプトです。
Phaseごとに進捗を確認しながら環境を整備してください。

---

## ✅ Progress Checklist

- [x] **Phase1**: pre-commit / lint オールグリーン ✅
- [x] **Phase1.5**: Terraform validate (azure/aws) 成功 ✅
- [ ] **Phase2**: Remote state backend setup
- [ ] **Phase3**: GitHub 認証 & CI/CD pipeline
- [ ] **Phase4**: Windows/WSL 環境最適化

---

## 🛠️ Phase1: Pre-commit / Lint Fix

**目的:** コード規約の統一 & IaC品質確保

### 実行手順

1. `pre-commit clean && pre-commit run --all-files`

1. **修正点:**
   - `.pre-commit-config.yaml` に改行と exclude 設定
   - `.gitattributes` で **LF固定**

```gitattributes
* text=auto eol=lf
*.tf text eol=lf
*.yaml text eol=lf
*.yml text eol=lf
*.md text eol=lf
```bash
- `legacy/mvp` 配下は lint 除外

1. 再実行してオールグリーン確認

1. **Commit:**

```bash
git add .
git commit -m "chore: enforce LF endings & lint config fixes"
```bash
### ✅ Phase1 完了状況

- [x] Pre-commit設定完了
- [x] YAML/Markdown lint設定
- [x] Git属性設定（LF固定）
- [x] Legacy除外設定

---

## 🏗️ Phase2: Terraform Validate Success

**目的:** IaCモジュール構造の検証

### 実行手順

1. **モジュールパス修正:**

```bash
# Azure MVP
envs/azure/azure-b1s-mvp/main.tf
source = "../../../modules/network/azure"
source = "../../../modules/compute/azure"

# AWS MVP
envs/aws/aws-ec2-mvp/main.tf
source = "../../../modules/network/aws"
source = "../../../modules/compute/aws"
```bash
1. **Terraform検証:**

```bash
# Azure環境
docker run --rm -v "${PWD}:/workspace" -w /workspace \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp init
docker run --rm -v "${PWD}:/workspace" -w /workspace \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp validate

# AWS環境
docker run --rm -v "${PWD}:/workspace" -w /workspace \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp init
docker run --rm -v "${PWD}:/workspace" -w /workspace \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp validate
```bash
### ✅ Phase2 完了状況

- [x] モジュールパス修正完了
- [x] Azure環境 validate成功
- [x] AWS環境 validate成功
- [x] ネットワークモジュール単体検証成功

---

## 🔐 Phase3: GitHub Authentication (TODO)

**目的:** CI/CD パイプライン準備

### 実行予定手順

1. **GitHub CLI認証:**

```bash
gh auth login
gh auth status
```bash
1. **リポジトリ設定:**

```bash
gh repo create --private
gh repo set-default
```bash
1. **Secrets設定:**

```bash
# Azure
gh secret set ARM_CLIENT_ID
gh secret set ARM_CLIENT_SECRET
gh secret set ARM_SUBSCRIPTION_ID
gh secret set ARM_TENANT_ID

# AWS
gh secret set AWS_ACCESS_KEY_ID
gh secret set AWS_SECRET_ACCESS_KEY
```bash
---

## 🖥️ Phase4: Windows/WSL Environment (TODO)

**目的:** 開発環境の最適化

### 実行予定手順

1. **Git safe.directory設定:**

```bash
git config --global --add safe.directory '*'
```bash
1. **PATH環境変数確認:**

```bash
echo $PATH
which docker
which git
```bash
1. **WSL統合確認:**

```bash
wsl --list --verbose
docker version
```bash
---

## 🎯 Phase1 完了レポート

### 変更内容と理由

1. **Pre-commit設定最適化**
   - MVP環境を除外パターンに追加: `^(examples/_legacy/|envs/(aws|azure)/.*-mvp/)`
   - 理由: MVP環境は開発用のため、厳密なlintを適用せずコアコードのみ品質管理

1. **改行コード統一**
   - `.gitattributes`: 全ファイルLF固定、PowerShellのみCRLF
   - `.editorconfig`: 詳細なインデント・改行設定追加
   - 理由: クロスプラットフォーム開発での一貫性確保

1. **バックエンド設定準備**
   - Azure/AWS環境にコメントアウトされたbackend設定追加
   - `backend.hcl`にプレースホルダー値とTODO手順記載
   - 理由: Phase2でのリモートステート移行を準備、現在はローカルステート維持

1. **Makefile強化**
   - `help`ターゲット追加で使用方法明確化
   - `.PHONY`ターゲット定義追加
   - 理由: 開発者体験向上、操作ミス防止

### Phase2で実施予定

1. **リモートステートバックエンド有効化**

   ```bash
   # Azure: Storage Account作成
   az group create --name tfstate-rg --location "Japan East"
   az storage account create --name tfstatesa --resource-group tfstate-rg

   # AWS: S3 + DynamoDB作成
   aws s3 mb s3://your-tfstate-bucket
   aws dynamodb create-table --table-name terraform-locks
```bash
1. **認証情報サニティチェック**

   ```bash
   # Azure
   az account show

   # AWS
   aws sts get-caller-identity
```bash
1. **Plan/Apply段階移行**

   ```bash
   make docker-plan CLOUD=azure
   make docker-apply CLOUD=azure
```bash
---

## 📋 現在の状態

### ✅ 完了済み

- Pre-commit hooks設定完了
- Terraform validate全環境成功
- モジュール構造修正完了
- Git属性・エディタ設定完了

### 🔄 次のステップ

1. GitHub認証とリポジトリ設定
1. CI/CDパイプライン有効化
1. Windows/WSL環境最適化

---

## 🚨 トラブルシューティング

### よくある問題

1. **改行コードエラー:**
   - `.gitattributes` でLF固定
   - `git add --renormalize .`

1. **モジュールパスエラー:**
   - 相対パス確認: `../../../modules/`
   - `.terraform/` ディレクトリクリア

1. **Docker権限エラー:**
   - WSL2でDocker Desktop起動確認
   - `docker run hello-world` テスト

### 緊急時コマンド

```bash
# 全リセット
pre-commit clean
rm -rf envs/*/.terraform/
git checkout HEAD -- .pre-commit-config.yaml

# 再初期化
pre-commit install
make validate CLOUD=azure
make validate CLOUD=aws
```bash
### Windows環境での実行

```powershell
# WSL環境でpre-commitを実行
wsl pre-commit run --all-files

# またはDockerで実行
docker run --rm -v "${PWD}:/workspace" -w /workspace python:3.11-slim bash -c "
  pip install pre-commit &&
  pre-commit run --all-files
"
```bash
## ✅ Pha

se1 検証結果

### Makefileターゲット検証

```bash
# ✅ terraform fmt - 成功
docker run --rm -v "${PWD}:/workspace" -w /workspace hashicorp/terraform:1.9.5 fmt -recursive
# Output: envs/aws/aws-ec2-mvp/main.tf, envs/azure/azure-b1s-mvp/main.tf

# ✅ make validate CLOUD=azure - 成功
docker run --rm -v "${PWD}:/workspace" -w /workspace hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp validate
# Output: Success! The configuration is valid.

# ✅ make validate CLOUD=aws - 成功
docker run --rm -v "${PWD}:/workspace" -w /workspace hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp validate
# Output: Success! The configuration is valid.
```bash
### Pre-commit状況

- **コアコード対象**: `modules/`, `.github/`, `docs/`, ルートレベル設定ファイル
- **除外設定**: `examples/_legacy/`, `envs/(aws|azure)/.*-mvp/`
- **ツール状況**: terraform_fmt/validate, markdownlint, yamllint 有効
- **一時無効**: terraform_tflint, terraform_trivy (Phase2で再有効化予定)

### 📁 作成・更新ファイル

- ✅ `.pre-commit-config.yaml` - MVP環境除外パターン追加
- ✅ `.editorconfig` - 詳細なインデント・改行設定
- ✅ `.gitattributes` - 包括的な改行コード設定
- ✅ `envs/*/backend.hcl` - リモートステート設定サンプル
- ✅ `envs/*/main.tf` - バックエンド設定準備（コメントアウト）
- ✅ `Makefile` - ヘルプターゲット追加

---

## 🚀 Phase2: Plan/Apply 実行

### 前提条件チェック

**認証情報設定が必要です:**

1. **Azure認証情報取得:**

```bash
# Service Principal作成
az ad sp create-for-rbac --name "terraform-sp" --role="Contributor" --scopes="/subscriptions/YOUR_SUBSCRIPTION_ID"

# 出力例:
# {
#   "appId": "your-client-id",
#   "password": "your-client-secret",
#   "tenant": "your-tenant-id"
# }
```bash
1. **AWS認証情報取得:**

```bash
# IAM User作成またはAccess Key取得
aws iam create-access-key --user-name terraform-user
```bash
1. **.env ファイル更新:**

```bash
# .envファイルを編集して実際の値を設定
ARM_CLIENT_ID=actual-client-id
ARM_CLIENT_SECRET=actual-client-secret
ARM_SUBSCRIPTION_ID=actual-subscription-id
ARM_TENANT_ID=actual-tenant-id

AWS_ACCESS_KEY_ID=actual-access-key
AWS_SECRET_ACCESS_KEY=actual-secret-key
```bash
### Phase2 実行手順

#### ステップ1: 認証確認

```bash
# Azure認証テスト
docker run --rm --env-file .env mcr.microsoft.com/azure-cli az account show

# AWS認証テスト
docker run --rm --env-file .env amazon/aws-cli sts get-caller-identity
```bash
#### ステップ2: Azure環境 Plan/Apply

```bash
# 初期化
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp init

# プラン作成
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp plan -out=tfplan.azure

# プラン内容確認
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp show tfplan.azure > docs/plan-azure.txt

# 適用（確認後）
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp apply tfplan.azure
```bash
#### ステップ3: AWS環境 Plan/Apply

```bash
# 初期化
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp init

# プラン作成
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp plan -out=tfplan.aws

# プラン内容確認
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp show tfplan.aws > docs/plan-aws.txt

# 適用（確認後）
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp apply tfplan.aws
```bash
### Phase2 実行結果

#### 🔍 実行ログ (2025-08-17 03:34:22Z)

**Azure環境テスト:**

```bash
# ✅ Init成功
docker run --rm -v "${PWD}:/workspace" -w /workspace hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp init
# Output: Terraform has been successfully initialized!

# ❌ Plan失敗 - 認証情報がプレースホルダー値
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp plan
# Error: Specified tenant identifier 'your-tenant-id' is neither a valid DNS name
# Reason: .envファイルに実際の値ではなくプレースホルダー値が設定されている
```bash
**現在の.env状況:**

- ARM_CLIENT_ID=your-client-id (プレースホルダー)
- ARM_CLIENT_SECRET=your-client-secret (プレースホルダー)
- ARM_SUBSCRIPTION_ID=your-subscription-id (プレースホルダー)
- ARM_TENANT_ID=your-tenant-id (プレースホルダー)

**AWS環境テスト:**

```bash
# 同様に認証情報が必要な状況
```bash
#### 📋 現在の状況

- ✅ Terraform構文・モジュール構造: 正常
- ✅ 初期化プロセス: 成功
- ❌ 認証情報: 未設定（実際の値が必要）
- ❌ Plan/Apply: 認証情報設定後に実行可能

#### 🔐 認証情報設定手順

**現在の状況:** .envファイルにプレースホルダー値が設定されています。実際の値に更新が必要です。

1. **Azure Service Principal作成:**

```bash
# Azure CLIでログイン
az login

# サブスクリプションID確認
az account show --query id -o tsv

# Service Principal作成
az ad sp create-for-rbac --name "terraform-sp" --role="Contributor" --scopes="/subscriptions/YOUR_SUBSCRIPTION_ID"

# 出力例:
# {
#   "appId": "12345678-1234-1234-1234-123456789012",        # → ARM_CLIENT_ID
#   "displayName": "terraform-sp",
#   "password": "abcdef12-3456-7890-abcd-ef1234567890",     # → ARM_CLIENT_SECRET
#   "tenant": "87654321-4321-4321-4321-210987654321"       # → ARM_TENANT_ID
# }

# サブスクリプションID取得
az account show --query id -o tsv                          # → ARM_SUBSCRIPTION_ID
```bash
1. **AWS IAM User/Role設定:**

```bash
aws configure
# または
export AWS_ACCESS_KEY_ID=your-key
export AWS_SECRET_ACCESS_KEY=your-secret
```bash
1. **.env更新手順:**

```bash
# .envファイルを編集して実際の値を設定
# 例:
ARM_CLIENT_ID=12345678-1234-1234-1234-123456789012
ARM_CLIENT_SECRET=abcdef12-3456-7890-abcd-ef1234567890
ARM_SUBSCRIPTION_ID=your-actual-subscription-id
ARM_TENANT_ID=87654321-4321-4321-4321-210987654321

AWS_ACCESS_KEY_ID=AKIA...
AWS_SECRET_ACCESS_KEY=your-actual-secret-key
```bash
1. **認証確認と実行:**

```bash
# 認証テスト
docker run --rm --env-file .env mcr.microsoft.com/azure-cli az account show
docker run --rm --env-file .env amazon/aws-cli sts get-caller-identity

# Terraform実行
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp plan

# または Makefileを使用
make docker-plan CLOUD=azure
make docker-apply CLOUD=azure
```bash
### 🔄 リモートステート移行準備

認証情報設定とローカルapply成功後、以下のコマンドでリモートステートに移行可能：

#### Azure移行手順

```bash
# 1. Storage Account作成
az group create --name tfstate-rg --location "Japan East"
az storage account create --name tfstatesa --resource-group tfstate-rg --location "Japan East" --sku Standard_LRS

# 2. backend.hcl更新
# resource_group_name  = "tfstate-rg"
# storage_account_name = "tfstatesa"
# container_name       = "tfstate"
# key                  = "azure-b1s-mvp.tfstate"

# 3. main.tfのbackend有効化
# terraform { backend "azurerm" {} }

# 4. 移行実行
terraform -chdir=envs/azure/azure-b1s-mvp init -migrate-state -backend-config=backend.hcl
```bash
#### AWS移行手順

```bash
# 1. S3 + DynamoDB作成
aws s3 mb s3://your-tfstate-bucket
aws dynamodb create-table --table-name terraform-locks --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

# 2. backend.hcl更新
# bucket         = "your-tfstate-bucket"
# key            = "aws-ec2-mvp.tfstate"
# region         = "ap-northeast-1"
# dynamodb_table = "terraform-locks"

# 3. main.tfのbackend有効化
# terraform { backend "s3" {} }

# 4. 移行実行
terraform -chdir=envs/aws/aws-ec2-mvp init -migrate-state -backend-config=backend.hcl
```bash
### 💰 コスト注意事項

**Azure推定コスト:**

- Resource Group: 無料
- Virtual Network: 無料
- 将来のVM: Standard_B1s ~$10-15/月

**AWS推定コスト:**

- VPC: 無料
- Subnet: 無料
- 将来のEC2: t3.micro ~$8-12/月

### 🔙 ロールバック手順

```bash
# リソース削除
make docker-destroy CLOUD=azure
make docker-destroy CLOUD=aws

# ローカルステート削除
rm -rf envs/azure/azure-b1s-mvp/.terraform/
rm -rf envs/aws/aws-ec2-mvp/.terraform/
rm -f envs/azure/azure-b1s-mvp/terraform.tfstate*
rm -f envs/aws/aws-ec2-mvp/terraform.tfstate*
```bash
## 🎯 Phase1 完了 - 次のステップ

**Phase1達成項目:**

- [x] Pre-commit設定最適化（コアコードのみ対象）
- [x] 改行コード統一（LF固定）
- [x] バックエンド設定準備（未有効化）
- [x] Makefileターゲット検証完了
- [x] ドキュメント整備

**Phase2準備完了:**

- リモートステートバックエンド設定サンプル準備済み
- 認証情報チェック手順文書化済み
- Plan/Apply段階への移行準備完了

**推奨コミットメッセージ:**

```bash
git commit -m "feat: complete Phase1 validation hardening

- Optimize pre-commit config (core code only, exclude MVP envs)
- Normalize line endings (LF) via .gitattributes & .editorconfig
- Prepare backend configs (commented, ready for Phase2)
- Verify Makefile targets: fmt, validate azure/aws
- Add comprehensive documentation in docs/kiro-setup.md

Phase1: ✅ All validation targets passing
Ready for Phase2: Remote state backend setup"
```bash
---

## 🔄 Phase2 実行状況 (最新)

### 現在の状況

- ✅ Terraform構造: 正常
- ✅ 初期化: 成功
- ❌ 認証情報: プレースホルダー値のまま
- ⏳ Plan/Apply: 実際の認証情報設定待ち

### 次のアクション

1. Azure Service Principalを作成
1. .envファイルに実際の値を設定
1. 認証テスト実行
1. Plan/Apply実行

### 実行準備完了コマンド

```bash
# 認証情報設定後、以下を実行:

# Azure Plan
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp plan -out=tfplan.azure

# Azure Plan表示
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp show tfplan.azure > docs/plan-azure.txt

# Azure Apply
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp apply tfplan.azure
```bash
## 🔐 認証情報設定が必要

現在、.envファイルにプレースホルダー値が設定されています。以下の手順で実際の認証情報を取得・設定してください：

### Azure Service Principal作成

```bash
# 1. Azure CLIでログイン
az login

# 2. サブスクリプション確認
az account list --output table
az account set --subscription "your-subscription-name"

# 3. Service Principal作成
az ad sp create-for-rbac --name "terraform-sp" --role="Contributor" \
  --scopes="/subscriptions/$(az account show --query id -o tsv)"

# 出力例（これらの値を.envに設定）:
# {
#   "appId": "12345678-abcd-1234-abcd-123456789012",     # ARM_CLIENT_ID
#   "password": "your-generated-secret",                 # ARM_CLIENT_SECRET
#   "tenant": "87654321-1234-1234-1234-210987654321"    # ARM_TENANT_ID
# }

# サブスクリプションID取得
az account show --query id -o tsv                       # ARM_SUBSCRIPTION_ID
```bash
### AWS認証情報取得

```bash
# 1. AWS CLIでログイン
aws configure

# 2. 認証情報確認
aws sts get-caller-identity

# 3. Access Key作成（必要に応じて）
aws iam create-access-key --user-name your-username
```bash
### .env更新後の実行

認証情報を実際の値に更新後、以下のコマンドでPhase2を実行します：

```bash
# ステップ1: Azure認証テスト
docker run --rm --env-file .env mcr.microsoft.com/azure-cli \
  sh -c 'az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID'

docker run --rm --env-file .env mcr.microsoft.com/azure-cli az account show

# ステップ2: AWS認証テスト
docker run --rm --env-file .env amazon/aws-cli sts get-caller-identity

# ステップ3: Azure Terraform実行
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp init

docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp plan -out=tfplan.azure

docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp show tfplan.azure > docs/plan-azure.txt

# ステップ4: Azure Apply（確認後）
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp apply tfplan.azure

# ステップ5: AWS Terraform実行
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp init

docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp plan -out=tfplan.aws

docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp show tfplan.aws > docs/plan-aws.txt

# ステップ6: AWS Apply（確認後）
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp apply tfplan.aws
```bash
---

## 🚀 Phase2: Azure One-Click App Deploy

### 概要

Azure Storage Static Websiteを使用した最小コストの静的サイトデプロイ。

### 新機能

- **静的ウェブサイトモジュール**: `modules/static-website/azure`
- **ワンクリックデプロイ**: Makefileターゲット追加
- **自動アプリデプロイ**: Azure CLI統合

### 実行手順

#### 1. インフラ構築

```bash
# Azure認証情報を.envに設定後
make up-azure
```bash
#### 2. アプリデプロイ

```bash
make app-deploy
```bash
#### 3. URL確認

```bash
make url-azure
```bash
#### 4. リソース削除

```bash
make down-azure
```bash
### 💰 コスト見積もり

- **Azure Storage (Static Website)**: ~¥1-5/月
- **データ転送**: 最初の5GB無料、その後 ~¥10/GB
- **合計**: 通常 ~¥10-50/月 (小規模サイト)

### 🔄 ロールバック手順

```bash
# Terraformでリソース削除
make down-azure

# 手動削除（必要に応じて）
az group delete --name sre-iac-starter-rg --yes --no-wait
```bash
### 📁 作成されたファイル

- `modules/static-website/azure/` - 静的ウェブサイトモジュール
- `app/index.html` - サンプルWebページ
- `Makefile` - ワンクリックターゲット追加

### 🔧 リモートステート準備 (Phase3)

```bash
# backend.hcl設定例
resource_group_name  = "tfstate-rg"
storage_account_name = "tfstatesa"
container_name       = "tfstate"
key                  = "azure-b1s-mvp.tfstate"

# main.tfでbackend有効化
terraform { backend "azurerm" {} }

# 移行実行
terraform init -migrate-state -backend-config=backend.hcl
```bash
---

## ✅ Phase2 実行結果 (2025-08-17 16:40)

### 🎉 デプロイ成功

**Azure Static Website URL:**
```bash
https://sreiacdevm627ymaf.z11.web.core.windows.net/
```bash
**Storage Account Name:**
```bash
sreiacdevm627ymaf
```bash
### 実行ログ

#### 1. エラー修正

```bash
# 問題: Storage Account名が24文字制限を超過
# 修正: 名前生成ロジックを改善
# 結果: sreiacdevm627ymaf (17文字) ✅
```bash
#### 2. インフラ構築

```bash
make up-azure
# ✅ 初期化成功
# ✅ プラン成功 (3リソース追加)
# ✅ 適用成功 (1分11秒で完了)
```bash
#### 3. 作成されたリソース

- ✅ `random_string.suffix`: m627ymaf
- ✅ `azurerm_storage_account.static_site`: sreiacdevm627ymaf
- ✅ `azurerm_storage_account_network_rules.static_site`: ネットワークルール

#### 4. 出力値
```bash
static_website_url = "https://sreiacdevm627ymaf.z11.web.core.windows.net/"
storage_account_name = "sreiacdevm627ymaf"
subnet_id = "/subscriptions/.../subnets/app"
```bash
### 💰 実際のコスト

- **Azure Storage Account**: Standard_LRS, Hot tier
- **推定月額**: ~¥5-50 (使用量による)
- **静的ウェブサイト機能**: 無料

### 🔧 修正内容

1. **Storage Account名前制約対応**
   - 24文字制限に対応
   - プロジェクト名短縮: `sre-iac-starter` → `sreiac`
   - 安全な名前生成ロジック追加

1. **locals ブロック追加**
   - 名前生成の可読性向上
   - Azure制約の明示的対応

### 🚀 次のステップ

1. **アプリデプロイ**: `make app-deploy`
1. **URL確認**: `make url-azure`
1. **リソース削除**: `make down-azure`

認証情報を設定していただければ、すぐにPhase2を完了できます！---

## 🔄 Phase3: リモートステート移行手順（実行前確認）

**注意: 以下のコマンドはPhase2成功後に実行してください。現在は実行しないでください。**

### Azure Storage Backend移行

```bash
# 1. Azure Storage Account作成
az group create --name tfstate-rg --location "Japan East"
az storage account create \
  --name tfstatesa \
  --resource-group tfstate-rg \
  --location "Japan East" \
  --sku Standard_LRS \
  --encryption-services blob

# 2. Storage Container作成
az storage container create \
  --name tfstate \
  --account-name tfstatesa

# 3. backend.hcl更新
cat > envs/azure/azure-b1s-mvp/backend.hcl << EOF
resource_group_name  = "tfstate-rg"
storage_account_name = "tfstatesa"
container_name       = "tfstate"
key                  = "azure-b1s-mvp.tfstate"
EOF

# 4. main.tfのbackend有効化
# terraform { backend "azurerm" {} } のコメントアウトを解除

# 5. 移行実行
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp \
  init -migrate-state -backend-config=backend.hcl
```bash
### AWS S3 Backend移行

```bash
# 1. S3バケット作成
aws s3 mb s3://your-unique-tfstate-bucket-name

# 2. DynamoDB テーブル作成
aws dynamodb create-table \
  --table-name terraform-locks \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

# 3. backend.hcl更新
cat > envs/aws/aws-ec2-mvp/backend.hcl << EOF
bucket         = "your-unique-tfstate-bucket-name"
key            = "aws-ec2-mvp.tfstate"
region         = "ap-northeast-1"
dynamodb_table = "terraform-locks"
encrypt        = true
EOF

# 4. main.tfのbackend有効化
# terraform { backend "s3" {} } のコメントアウトを解除

# 5. 移行実行
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp \
  init -migrate-state -backend-config=backend.hcl
```bash
### 💰 コスト見積もり

**Azure (月額):**

- Resource Group: 無料
- Virtual Network: 無料
- Storage Account: ~$0.05/月
- 将来のVM (Standard_B1s): ~$10-15/月

**AWS (月額):**

- VPC: 無料
- Subnet: 無料
- S3 (tfstate): ~$0.01/月
- DynamoDB (locks): ~$1.25/月
- 将来のEC2 (t3.micro): ~$8-12/月

### 🔙 ロールバック手順

```bash
# リソース削除
docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/azure/azure-b1s-mvp destroy

docker run --rm -v "${PWD}:/workspace" -w /workspace --env-file .env \
  hashicorp/terraform:1.9.5 -chdir=envs/aws/aws-ec2-mvp destroy

# ローカルステート削除
rm -rf envs/azure/azure-b1s-mvp/.terraform/
rm -rf envs/aws/aws-ec2-mvp/.terraform/
rm -f envs/azure/azure-b1s-mvp/terraform.tfstate*
rm -f envs/aws/aws-ec2-mvp/terraform.tfstate*

# リモートステート削除（必要に応じて）
az storage container delete --name tfstate --account-name tfstatesa
aws s3 rb s3://your-unique-tfstate-bucket-name --force
aws dynamodb delete-table --table-name terraform-locks
```bash

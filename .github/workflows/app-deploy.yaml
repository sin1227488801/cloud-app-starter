name: app-deploy
on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - "app-landing/**"
  workflow_dispatch:

permissions:
  contents: read

env:
  TFSTATE_RG: sre-iac-starter-tfstate-rg
  TFSTATE_LOC: japaneast
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: azure-b1s-mvp.tfstate

jobs:
  deploy-static-site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Ensure tfstate backend resources
        env:
          TFSTATE_RG: ${{ env.TFSTATE_RG }}
          TFSTATE_LOC: ${{ env.TFSTATE_LOC }}
          TFSTATE_CONTAINER: ${{ env.TFSTATE_CONTAINER }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          echo "Ensuring tfstate backend resources..."
          
          # ensure-tfstate.shを実行
          if ! bash scripts/ci/ensure-tfstate.sh | tee ensure.log; then
            echo "Error: ensure-tfstate.sh failed"
            cat ensure.log
            exit 1
          fi
          
          # Storage Account名を取得
          SA=$(grep '^TFSTATE_SA=' ensure.log | cut -d= -f2)
          if [ -z "$SA" ]; then
            echo "Error: Failed to get storage account name from output"
            echo "ensure.log contents:"
            cat ensure.log
            exit 1
          fi
          
          echo "✅ Storage Account configured: $SA"
          echo "TFSTATE_SA=$SA" >> $GITHUB_ENV

      - name: Debug backend configuration
        run: |
          echo "Backend configuration:"
          echo "  TFSTATE_RG: ${{ env.TFSTATE_RG }}"
          echo "  TFSTATE_SA: ${{ env.TFSTATE_SA }}"
          echo "  TFSTATE_CONTAINER: ${{ env.TFSTATE_CONTAINER }}"
          echo "  TFSTATE_KEY: ${{ env.TFSTATE_KEY }}"

      - name: Terraform Init (remote backend)
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          echo "Initializing Terraform with backend configuration..."
          terraform -chdir=envs/azure/azure-b1s-mvp init -reconfigure \
            -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"

      - name: Resolve outputs (robust)
        id: out
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          set -euo pipefail

          echo "Checking for storage account..."
          RG_NAME="sre-iac-starter-rg"
          
          # Azure CLIでストレージアカウントを検索
          SA_NAME=$(az storage account list --resource-group "$RG_NAME" \
            --query "[?contains(name, 'sreiac')].name | [0]" \
            -o tsv 2>/dev/null || echo "")

          if [ -n "$SA_NAME" ]; then
            WEB_URL=$(az storage account show -n "$SA_NAME" \
              -g "$RG_NAME" --query "primaryEndpoints.web" \
              -o tsv 2>/dev/null || echo "")
            echo "Found storage account: $SA_NAME"
            echo "Website URL: $WEB_URL"
          else
            echo "No storage account found"
            SA_NAME=""
            WEB_URL=""
          fi

          echo "sa_name=$SA_NAME" >> "$GITHUB_OUTPUT"
          echo "web_url=$WEB_URL" >> "$GITHUB_OUTPUT"

      - name: Deploy to Static Website (with key auth)
        env:
          SA_NAME: ${{ steps.out.outputs.sa_name }}
          WEB_URL: ${{ steps.out.outputs.web_url }}
        run: |
          echo "=== Starting deployment process ==="
          echo "SA_NAME: $SA_NAME"
          echo "WEB_URL: $WEB_URL"

          if [ -z "$SA_NAME" ]; then
            echo "❌ No storage account name available."
            echo "Please run the terraform-apply workflow first."
            exit 1
          fi

          echo "✅ Storage account found: $SA_NAME"

          # ソースディレクトリを決定
          SRC_DIR=""
          for d in "app-landing" "app/dist" "app"; do
            if [ -d "$d" ]; then
              SRC_DIR="$d"
              echo "📁 Using source directory: $SRC_DIR"
              break
            fi
          done

          if [ -z "$SRC_DIR" ]; then
            SRC_DIR="app"
            echo "📁 Creating default directory: $SRC_DIR"
            mkdir -p "$SRC_DIR"
          fi

          # デフォルトのindex.htmlを作成（存在しない場合）
          if [ ! -f "$SRC_DIR/index.html" ]; then
            echo "📝 Creating default index.html"
            cat > "$SRC_DIR/index.html" << 'EOF'
          <!doctype html>
          <html lang="ja">
          <head>
            <meta charset="utf-8">
            <title>SRE IaC Starter</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
          </head>
          <body>
            <h1>SRE IaC Starter</h1>
            <p>Deployed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')</p>
            <p>Storage Account: $SA_NAME</p>
          </body>
          </html>
          EOF
          fi

          # ストレージアカウントキーを取得
          echo "🔑 Getting storage account key..."
          STORAGE_KEY=$(az storage account keys list \
            --account-name "$SA_NAME" \
            --resource-group "sre-iac-starter-rg" \
            --query '[0].value' \
            -o tsv)

          if [ -z "$STORAGE_KEY" ]; then
            echo "❌ Failed to get storage account key"
            exit 1
          fi

          echo "✅ Storage key obtained successfully"

          # ファイルをアップロード
          echo "📤 Uploading files to \$web container..."
          
          # 環境変数でストレージ認証情報を設定
          export AZURE_STORAGE_ACCOUNT="$SA_NAME"
          export AZURE_STORAGE_KEY="$STORAGE_KEY"
          
          if az storage blob upload-batch \
            --source "$SRC_DIR" \
            --destination '$web' \
            --overwrite \
            --auth-mode key; then
            echo "✅ Upload successful!"
            if [ -n "$WEB_URL" ]; then
              echo "🌐 Website URL: $WEB_URL"
            else
              echo "🌐 Website should be available at: https://$SA_NAME.z11.web.core.windows.net/"
            fi
          else
            echo "❌ Upload failed!"
            exit 1
          fi
name: app-deploy
on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - "app-landing/**"

permissions:
  contents: read

env:
  TFSTATE_RG: sre-iac-starter-tfstate-rg
  TFSTATE_LOC: japaneast
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: azure-b1s-mvp.tfstate

jobs:
  deploy-static-site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId":"${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId":"${{ secrets.ARM_TENANT_ID }}"
            }

      # backendのSA/Containerが無いと init 失敗するため ensure（冪等）
      - name: Ensure tfstate backend resources
        env:
          TFSTATE_RG: ${{ env.TFSTATE_RG }}
          TFSTATE_LOC: ${{ env.TFSTATE_LOC }}
          TFSTATE_CONTAINER: ${{ env.TFSTATE_CONTAINER }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          bash scripts/ci/ensure-tfstate.sh | tee ensure.log
          SA=$(grep '^TFSTATE_SA=' ensure.log | cut -d= -f2)
          echo "TFSTATE_SA=$SA" >> $GITHUB_ENV

      - name: Terraform Init (remote backend / read state)
        env:
          ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init \
            -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"
      - name: Resolve outputs (robust)
        id: out
        env:
          TF_DIR: envs/azure/azure-b1s-mvp
        run: |
          set -euo pipefail
          cd $GITHUB_WORKSPACE || exit 1

          # Attempt to get JSON outputs (suppress stderr warnings)
          JSON=$(terraform -chdir="$TF_DIR" output -json 2>/dev/null || echo '{}')

          # Use python to safely extract values we care about
          PY_OUT=$(python3 - <<'PY'
import sys, json
try:
    j = json.load(sys.stdin)
except Exception:
    j = {}
def val(k):
    try:
        v = j.get(k)
        if isinstance(v, dict) and "value" in v:
            return v["value"]
        return v
    except:
        return None

out = {}
for k in ["storage_account_name", "static_website_url", "static_website_primary_endpoint"]:
    v = val(k)
    if v is not None:
        out[k] = v
print(json.dumps(out))
PY
<<<"$JSON"
)

          # Parse python output and write to GITHUB_OUTPUT safely
          SA=$(echo "$PY_OUT" | python3 -c "import sys,json; d=json.load(sys.stdin); print(d.get('storage_account_name') or '')")
          WEB_URL=$(echo "$PY_OUT" | python3 -c "import sys,json; d=json.load(sys.stdin); print(d.get('static_website_url') or d.get('static_website_primary_endpoint') or '')")
          # Always write keys (empty if not present) to avoid broken 'echo >> $GITHUB_OUTPUT' later
          echo "sa_name=${SA}" >> "$GITHUB_OUTPUT"
          echo "web_url=${WEB_URL}" >> "$GITHUB_OUTPUT"

      - name: Upload to $web
        env:
          SA_NAME: ${{ steps.out.outputs.sa_name }}
        run: |
          SRC_DIR=""
          for d in "app-landing" "app/dist" "app"; do
            if [ -d "$d" ]; then SRC_DIR="$d"; break; fi
          done
          [ -n "$SRC_DIR" ] || SRC_DIR="app"
          mkdir -p "$SRC_DIR"
          if [ ! -f "$SRC_DIR/index.html" ]; then
            printf '%s\n' \
              "<!doctype html><meta charset=utf-8><title>SRE IaC Starter</title><h1>SRE IaC Starter</h1><p>Deployed: $(date -u +%FT%TZ)</p>" \
              > "$SRC_DIR/index.html"
          fi
          az storage blob upload-batch --account-name "$SA_NAME" -s "$SRC_DIR" -d '$web' --overwrite --auth-mode login
          echo "${{ steps.out.outputs.web_url }}"

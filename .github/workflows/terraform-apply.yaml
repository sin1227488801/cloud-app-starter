name: terraform-apply

on:
  push:
    branches: [main]
    paths: ["envs/**", "modules/**"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init (Azure)
        run: |
          cd envs/azure/azure-b1s-mvp
          terraform init -backend-config=backend.hcl
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Validate (Azure)
        run: |
          cd envs/azure/azure-b1s-mvp
          terraform validate

      - name: Terraform Plan (Azure)
        id: plan
        run: |
          cd envs/azure/azure-b1s-mvp
          terraform plan -detailed-exitcode -no-color -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        continue-on-error: true

      - name: Terraform Apply (Azure)
        if: steps.plan.outputs.exitcode == 2
        run: |
          cd envs/azure/azure-b1s-mvp

          echo "üöÄ Applying Terraform changes to Azure..."
          terraform apply -auto-approve tfplan

          echo "‚úÖ Terraform apply completed successfully!"
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Get Infrastructure Outputs
        if: steps.plan.outputs.exitcode == 2 || steps.plan.outputs.exitcode == 0
        id: outputs
        run: |
          cd envs/azure/azure-b1s-mvp

          STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "N/A")
          WEBSITE_URL=$(terraform output -raw static_website_url 2>/dev/null || echo "N/A")
          SUBNET_ID=$(terraform output -raw subnet_id 2>/dev/null || echo "N/A")

          echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "subnet_id=$SUBNET_ID" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Summary
        run: |
          echo "## üèóÔ∏è Terraform Apply Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.plan.outputs.exitcode }}" = "0" ]; then
            echo "### ‚úÖ No Changes Required" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure is already up to date." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.plan.outputs.exitcode }}" = "2" ]; then
            echo "### üöÄ Changes Applied Successfully" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure has been updated." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Plan Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for errors." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage Account**: \`${{ steps.outputs.outputs.storage_account }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Website URL**: [${{ steps.outputs.outputs.website_url }}](${{ steps.outputs.outputs.website_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Subnet ID**: \`${{ steps.outputs.outputs.subnet_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. If app files were also changed, the app-deploy workflow will run automatically" >> $GITHUB_STEP_SUMMARY
          echo "2. Visit the website to verify the infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "3. Check Azure Portal for resource status" >> $GITHUB_STEP_SUMMARY

      - name: Plan Failed
        if: steps.plan.outputs.exitcode == 1
        run: |
          echo "‚ùå Terraform plan failed"
          exit 1
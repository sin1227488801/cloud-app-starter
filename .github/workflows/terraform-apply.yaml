name: terraform-apply
on:
  push:
    branches: [main]
    paths:
      - "envs/**"
      - "modules/**"
      - "app/**"
      - "app-landing/**"

permissions:
  contents: read

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TFSTATE_RG: sre-iac-starter-tfstate-rg
  TFSTATE_LOC: japaneast
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: azure-b1s-mvp.tfstate

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # Azure ログイン
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId":"${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId":"${{ secrets.ARM_TENANT_ID }}"
            }

      # tfstate 用の SA/Container を用意（なければ作成/あれば流用）
      - name: Ensure tfstate backend resources
        env:
          TFSTATE_RG: ${{ env.TFSTATE_RG }}
          TFSTATE_LOC: ${{ env.TFSTATE_LOC }}
          TFSTATE_CONTAINER: ${{ env.TFSTATE_CONTAINER }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          bash scripts/ci/ensure-tfstate.sh | tee ensure.log
          # SA名を拾ってエクスポート
          SA=$(grep '^TFSTATE_SA=' ensure.log | cut -d= -f2)
          echo "TFSTATE_SA=$SA" >> $GITHUB_ENV

      # validate（backend=false）
      - name: Terraform Validate (Azure)
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init -backend=false
          terraform -chdir=envs/azure/azure-b1s-mvp validate

      # backend 付き init（azurerm）
      - name: Terraform Init (remote backend)
        env:
          ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init \
            -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"

      # 既存リソースがあれば import（存在チェックしながら）
      - name: Terraform Import existing
        env:
          ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          bash scripts/ci/try-import-existing.sh

      # apply
      - name: Terraform Apply (Azure)
        env:
          ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp apply -auto-approve

      # 静的サイトへアップロード
      - name: Upload to Static Website ($web)
        run: |
          SA_NAME="$(terraform -chdir=envs/azure/azure-b1s-mvp output -raw storage_account_name)"
          echo "Storage Account: $SA_NAME"
          SRC_DIR=""
          for d in "app-landing" "app/dist" "app"; do
            if [ -d "$d" ]; then SRC_DIR="$d"; break; fi
          done
          [ -n "$SRC_DIR" ] || SRC_DIR="app"
          mkdir -p "$SRC_DIR"
          if [ ! -f "$SRC_DIR/index.html" ]; then
            printf '%s\n' \
              "<!doctype html><meta charset=utf-8><title>SRE IaC Starter</title><h1>SRE IaC Starter</h1><p>Deployed: $(date -u +%FT%TZ)</p>" \
              > "$SRC_DIR/index.html"
          fi
          az storage blob upload-batch --account-name "$SA_NAME" -s "$SRC_DIR" -d '$web' --overwrite --auth-mode login
          az storage account show -n "$SA_NAME" --query "primaryEndpoints.web" -o tsv

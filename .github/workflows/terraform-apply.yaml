name: terraform-apply
on:
  push:
    branches: [main]
    paths:
      - "envs/**"
      - "modules/**"
      - "app/**"
      - "app-landing/**"

permissions:
  contents: read

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TFSTATE_RG: sre-iac-starter-tfstate-rg
  TFSTATE_LOC: japaneast
  TFSTATE_CONTAINER: tfstate
  TFSTATE_KEY: azure-b1s-mvp.tfstate

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Ensure tfstate backend resources
        env:
          TFSTATE_RG: ${{ env.TFSTATE_RG }}
          TFSTATE_LOC: ${{ env.TFSTATE_LOC }}
          TFSTATE_CONTAINER: ${{ env.TFSTATE_CONTAINER }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          bash scripts/ci/ensure-tfstate.sh | tee ensure.log
          SA=$(grep '^TFSTATE_SA=' ensure.log | cut -d= -f2)
          echo "TFSTATE_SA=$SA" >> $GITHUB_ENV

      - name: Terraform Validate (Azure)
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init -backend=false
          terraform -chdir=envs/azure/azure-b1s-mvp validate

      - name: Terraform Init (remote backend)
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init \
            -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" \
            -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"

      - name: Terraform Import existing
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: |
          bash scripts/ci/try-import-existing.sh

      - name: Terraform Apply (Azure)
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp apply -auto-approve

      - name: Upload to Static Website ($web)
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          echo "Getting storage account name from Terraform output..."

          # Terraformのoutputを安全に取得
          if SA_NAME=$(terraform -chdir=envs/azure/azure-b1s-mvp output \
            -raw storage_account_name 2>/dev/null); then
            echo "Storage Account found: $SA_NAME"
          else
            echo "Failed to get storage account from Terraform output"
            echo "Trying alternative method..."

            RG_NAME="sre-iac-starter-rg"
            SA_NAME=$(az storage account list --resource-group "$RG_NAME" \
              --query "[?contains(name, 'sreiac')].name | [0]" \
              -o tsv 2>/dev/null || echo "")

            if [ -n "$SA_NAME" ]; then
              echo "Found storage account via Azure CLI: $SA_NAME"
            else
              echo "No storage account found."
              exit 1
            fi
          fi

          echo "Preparing source directory..."
          SRC_DIR=""
          for d in "app-landing" "app/dist" "app"; do
            if [ -d "$d" ]; then
              SRC_DIR="$d"
              echo "Using source directory: $SRC_DIR"
              break
            fi
          done

          if [ -z "$SRC_DIR" ]; then
            SRC_DIR="app"
            echo "Creating default directory: $SRC_DIR"
            mkdir -p "$SRC_DIR"
          fi

          # デフォルトのindex.htmlを作成（存在しない場合）
          if [ ! -f "$SRC_DIR/index.html" ]; then
            echo "Creating default index.html"
            printf '%s\n' \
              '<!doctype html>' \
              '<html lang="ja">' \
              '<head>' \
              '  <meta charset="utf-8">' \
              '  <title>SRE IaC Starter</title>' \
              '  <meta name="viewport" content="width=device-width, initial-scale=1.0">' \
              '</head>' \
              '<body>' \
              '  <h1>SRE IaC Starter</h1>' \
              "  <p>Deployed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')</p>" \
              "  <p>Storage Account: \$SA_NAME</p>" \
              '</body>' \
              '</html>' \
              > "$SRC_DIR/index.html"
          fi

          echo "Uploading files to web container..."
          if az storage blob upload-batch \
            --account-name "$SA_NAME" \
            --source "$SRC_DIR" \
            --destination '$web' \
            --overwrite \
            --auth-mode login; then
            echo "Upload successful!"

            if WEB_URL=$(az storage account show -n "$SA_NAME" \
              --query "primaryEndpoints.web" -o tsv 2>/dev/null); then
              echo "Website URL: $WEB_URL"
            else
              echo "Website should be available at: https://$SA_NAME.z11.web.core.windows.net/"
            fi
          else
            echo "Upload failed!"
            exit 1
          fi

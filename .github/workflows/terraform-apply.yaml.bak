name: terraform-apply
on:
  push:
    branches: [main]
    paths:
      - "envs/**"
      - "modules/**"
      - "app/**"            # ← アプリ変更でも実行

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # （任意）Azureクレデンシャルのフォーマット簡易チェック
      - name: Sanity check Azure creds
        shell: bash
        run: |
          ok(){ echo "OK: $1 format looks valid"; }
          ng(){ echo "NG: $1 format invalid"; exit 1; }
          is_guid(){ echo "$1" | grep -Eiq '^[0-9a-f-]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$'; }
          [ -n "${{ secrets.ARM_CLIENT_SECRET }}" ] || { echo "NG: ARM_CLIENT_SECRET empty"; exit 1; }
          is_guid "${{ secrets.ARM_CLIENT_ID }}"       && ok ARM_CLIENT_ID       || ng ARM_CLIENT_ID
          is_guid "${{ secrets.ARM_SUBSCRIPTION_ID }}" && ok ARM_SUBSCRIPTION_ID || ng ARM_SUBSCRIPTION_ID
          is_guid "${{ secrets.ARM_TENANT_ID }}"       && ok ARM_TENANT_ID       || ng ARM_TENANT_ID

      # PRと同条件で validate（backend 無効）
      - name: Terraform Validate (Azure)
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init -backend=false
          terraform -chdir=envs/azure/azure-b1s-mvp validate

      # mainで apply（SP 認証は Secrets の ARM_* 環境変数で）
      - name: Terraform Apply (Azure)
        env:
          ARM_CLIENT_ID:        ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:    ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:        ${{ secrets.ARM_TENANT_ID }}
        run: |
          terraform -chdir=envs/azure/azure-b1s-mvp init
          terraform -chdir=envs/azure/azure-b1s-mvp apply -auto-approve

      # Azure へログイン（以降の az コマンド用）— こちらに統一
      - name: Azure Login (Service Principal)
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.ARM_CLIENT_ID }}
          tenant-id:        ${{ secrets.ARM_TENANT_ID }}
          subscription-id:  ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret:    ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Preflight - Verify Azure Login
        run: az account show --query '{tenantId:tenantId,subscriptionId:id,user:user.name}' -o table

      # Apply直後の state から outputs を取得して、そのまま静的Webへデプロイ
      - name: App Deploy to Azure Static Website
        run: |
          SA_NAME="$(terraform -chdir=envs/azure/azure-b1s-mvp output -raw storage_account_name)"
          echo "Storage Account: $SA_NAME"

          # ビルド成果物が無いときのプレースホルダ
          SRC_DIR="app/dist"; [ -d "$SRC_DIR" ] || SRC_DIR=app
          mkdir -p "$SRC_DIR"
          [ -f "$SRC_DIR/index.html" ] || printf '%s\n' \
            "<!doctype html><meta charset=utf-8><title>SRE IaC Starter</title><h1>SRE IaC Starter</h1><p>Deployed: $(date -u +%FT%TZ)</p>" \
            > "$SRC_DIR/index.html"

          # $web はクォートしてリテラル扱い
          az storage blob upload-batch --account-name "$SA_NAME" -s "$SRC_DIR" -d '$web' --overwrite --auth-mode login

          echo "URL:"
          az storage account show -n "$SA_NAME" --query "primaryEndpoints.web" -o tsv
